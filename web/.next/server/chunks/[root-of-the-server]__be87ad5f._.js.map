{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver/Brown/Brown-Courses/web/src/app/api/search/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport {\n  Pinecone,\n  type ScoredPineconeRecord,\n} from \"@pinecone-database/pinecone\";\nimport axios from \"axios\";\nimport { GoogleAuth } from \"google-auth-library\";\n\nconst PINECONE_API_KEY = process.env.PINECONE_API_KEY!;\nconst PINECONE_INDEX = process.env.PINECONE_INDEX!;\nconst GEMINI_PROJECT_ID = process.env.GEMINI_PROJECT_ID!;\nconst GEMINI_LOCATION = process.env.GEMINI_LOCATION!;\nconst GEMINI_MODEL = process.env.GEMINI_MODEL!;\n\nasync function getGeminiAccessToken() {\n  const auth = new GoogleAuth({\n    credentials: {\n      client_email: process.env.GCP_SERVICE_ACCOUNT_EMAIL,\n      private_key: process.env.GCP_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\n    },\n    projectId: process.env.GCP_PROJECT_ID,\n    scopes: \"https://www.googleapis.com/auth/cloud-platform\",\n  });\n  const client = await auth.getClient();\n  const accessToken = await client.getAccessToken();\n  return accessToken.token;\n}\n\nasync function getGeminiEmbedding(text: string) {\n  const accessToken = await getGeminiAccessToken();\n  const url = `https://${GEMINI_LOCATION}-aiplatform.googleapis.com/v1/projects/${GEMINI_PROJECT_ID}/locations/${GEMINI_LOCATION}/publishers/google/models/${GEMINI_MODEL}:predict`;\n\n  const response = await axios.post(\n    url,\n    { instances: [{ content: text }] },\n    {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  return response.data.predictions[0].embeddings.values;\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { user_blurb, num_courses = 10 } = await req.json();\n\n    // 1. Get embedding for user blurb\n    const embedding = await getGeminiEmbedding(user_blurb);\n\n    // 2. Query Pinecone\n    const pinecone = new Pinecone({ apiKey: PINECONE_API_KEY });\n    const index = pinecone.index<{\n      title: string;\n      department: string;\n      description: string;\n    }>(PINECONE_INDEX);\n\n    const queryResponse = await index.query({\n      vector: embedding,\n      topK: num_courses,\n      includeMetadata: true,\n    });\n\n    // 3. Format and return results\n    const results = queryResponse.matches.map(\n      (\n        match: ScoredPineconeRecord<{\n          title: string;\n          department: string;\n          description: string;\n        }>\n      ) => ({\n        id: match.id,\n        title: match.metadata?.title ?? \"\",\n        department: match.metadata?.department ?? \"\",\n        description: match.metadata?.description ?? \"\",\n        score: match.score,\n      })\n    );\n\n    return NextResponse.json({ results });\n  } catch (error: unknown) {\n    console.error(\"API error:\", error);\n    return NextResponse.json(\n      {\n        error: error instanceof Error ? error.message : \"Internal server error\",\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAIA;AACA;;;;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,gBAAgB;AACrD,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AACjD,MAAM,oBAAoB,QAAQ,GAAG,CAAC,iBAAiB;AACvD,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe;AACnD,MAAM,eAAe,QAAQ,GAAG,CAAC,YAAY;AAE7C,eAAe;IACb,MAAM,OAAO,IAAI,oKAAA,CAAA,aAAU,CAAC;QAC1B,aAAa;YACX,cAAc,QAAQ,GAAG,CAAC,yBAAyB;YACnD,aAAa,QAAQ,GAAG,CAAC,eAAe,EAAE,QAAQ,QAAQ;QAC5D;QACA,WAAW,QAAQ,GAAG,CAAC,cAAc;QACrC,QAAQ;IACV;IACA,MAAM,SAAS,MAAM,KAAK,SAAS;IACnC,MAAM,cAAc,MAAM,OAAO,cAAc;IAC/C,OAAO,YAAY,KAAK;AAC1B;AAEA,eAAe,mBAAmB,IAAY;IAC5C,MAAM,cAAc,MAAM;IAC1B,MAAM,MAAM,CAAC,QAAQ,EAAE,gBAAgB,uCAAuC,EAAE,kBAAkB,WAAW,EAAE,gBAAgB,0BAA0B,EAAE,aAAa,QAAQ,CAAC;IAEjL,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAC/B,KACA;QAAE,WAAW;YAAC;gBAAE,SAAS;YAAK;SAAE;IAAC,GACjC;QACE,SAAS;YACP,eAAe,CAAC,OAAO,EAAE,aAAa;YACtC,gBAAgB;QAClB;IACF;IAEF,OAAO,SAAS,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM;AACvD;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,EAAE,GAAG,MAAM,IAAI,IAAI;QAEvD,kCAAkC;QAClC,MAAM,YAAY,MAAM,mBAAmB;QAE3C,oBAAoB;QACpB,MAAM,WAAW,IAAI,qKAAA,CAAA,WAAQ,CAAC;YAAE,QAAQ;QAAiB;QACzD,MAAM,QAAQ,SAAS,KAAK,CAIzB;QAEH,MAAM,gBAAgB,MAAM,MAAM,KAAK,CAAC;YACtC,QAAQ;YACR,MAAM;YACN,iBAAiB;QACnB;QAEA,+BAA+B;QAC/B,MAAM,UAAU,cAAc,OAAO,CAAC,GAAG,CACvC,CACE,QAKG,CAAC;gBACJ,IAAI,MAAM,EAAE;gBACZ,OAAO,MAAM,QAAQ,EAAE,SAAS;gBAChC,YAAY,MAAM,QAAQ,EAAE,cAAc;gBAC1C,aAAa,MAAM,QAAQ,EAAE,eAAe;gBAC5C,OAAO,MAAM,KAAK;YACpB,CAAC;QAGH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAQ;IACrC,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}